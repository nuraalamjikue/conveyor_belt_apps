import AsyncStorage from '@react-native-async-storage/async-storage';
import {useIsFocused} from '@react-navigation/native';
import React, {useEffect, useRef, useState} from 'react';
import {ActivityIndicator, ScrollView, Text, View} from 'react-native';
import {RNCamera} from 'react-native-camera';
import {DataTable} from 'react-native-paper';
import QRCodeScanner from 'react-native-qrcode-scanner';
import Toast from 'react-native-toast-message';
import {useAppTheme} from '../../../App';
import Container from '../../../src/components/Container';
import instance from '../../axios/axiosInstance';
import Button from '../../components/Button';
import ToastMsg from '../../components/Toast';
import {CartonDetails} from '../../interface/CartonDetails';

const CartonSendScreen = () => {
  const {COLORS, SIZES} = useAppTheme();
  const isFocused = useIsFocused();
  const [isOpenCamera, setIsOpenCamera] = useState(false);
  const [isFlashOn, setIsFlashOn] = useState(false);
  const [ScanCode, setScanCode] = useState('');
  const [finalData, setFinalData] = useState<CartonDetails[]>([]);
  const [sendDate, setSendDate] = useState<string | null>(null);

  let scanner: any = useRef(null);

  const getCartonlistForSending = data => {
    var companyId = 0;
    var floor = 0;
    var buyerId = 0;
    var vScanCode = data;
    console.log('ScanCode', ScanCode);

    if (vScanCode) {
      instance
        .post(
          `SendFinishGoods/get_cartonlist_for_scan_sending/${companyId}/${floor}/${buyerId}/${vScanCode}`,
        )
        .then(res => {
          var vResult = JSON.parse(res.data.res);
          setIsOpenCamera(false);
          if (vResult) {
            if (parseInt(vResult[0].SendScanStatus) == 0) {
              var vStatus: number = 0;
              finalData?.map((e: any) => {
                if (e.ScanCode === vResult[0].ScanCode) {
                  vStatus = 1;
                }
              });

              if (vStatus === 1) {
                ToastMsg({
                  text1: 'Carton Already Added',
                  type: 'info',
                });
                setTimeout(() => {
                  setIsOpenCamera(true);
                }, 1000);
              } else {
                vResult[0].customSl = finalData.length + 1;
                var d = [...finalData, vResult[0]];
                setFinalData(d);

                ToastMsg({
                  text1: 'Carton added successfully',
                  type: 'success',
                });
                setTimeout(() => {
                  setIsOpenCamera(true);
                }, 1500);
              }
            } else {
              ToastMsg({
                text1: 'Carton Already Sended',
                type: 'error',
              });
              setTimeout(() => {
                setIsOpenCamera(true);
              }, 1000);
            }
          } else {
            ToastMsg({
              text1: 'Carton not found!!!',
              type: 'error',
            });
            setTimeout(() => {
              setIsOpenCamera(true);
            }, 1000);
          }
        });
      setScanCode('');
    }
  };

  const getDate = () => {
    let d: Date = new Date();

    let month = String(d.getMonth() + 1);
    let day = String(d.getDate());
    const year = String(d.getFullYear());

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    const today = `${year}-${month}-${day}`;
    setSendDate(today);
  };

  useEffect(() => {
    getDate();
  }, []);

  useEffect(() => {
    if (isFocused) {
      setIsOpenCamera(false);
      setIsFlashOn(false);
      setFinalData([]);
    }
  }, [isFocused]);

  const postAllData = async () => {
    const userId = await AsyncStorage.getItem('userId');
    const userAddLoginId = await AsyncStorage.getItem('userAddLoginId');

    var DetailArray: any[] = [];

    if (finalData.length > 0) {
      finalData.forEach(data => {
        DetailArray.push({
          id: 0,
          sendingcartonmasterid: 0,
          companyid: data.CompanyId,
          floorname: data.FloorName,
          packingdate: sendDate,
          packingmasterid: data.PackingMasterId ? data.PackingMasterId : 0,
          packingdetailsid: data.PackingDetailsId ? data.PackingDetailsId : 0,
          assortmasterid: data.AssortMasterId ? data.AssortMasterId : 0,
          assortcartonid: data.AssorCartonId ? data.AssorCartonId : 0,
          buyer: data.Buyer,
          season: data.Season,
          style: data.Style,
          po: data.PoNo,
          color: data.ColorId,
          size: data.SizeId,
          cbm: data.cbm ? data.cbm : 0,
          sendcartonqty: data.Balance,
          pcbid: data.PcbId,
          pcsPerCarton: parseInt(data.PcsPerCarton),
          itemstatus: data.Status,
          cbmId: data.cbmId,
          active: 1,
          comments: '',
          shipdate: data.ShipDate ? data.ShipDate : null,
          pcd: data.PCD ? data.PCD : null,
          buydate: data.BuyDate ? data.BuyDate : null,
          protono: data.ProtoNo ? data.ProtoNo : null,
          setcode: data.SetCode ? data.SetCode : null,
          destinationplace: data.DestinationPlace
            ? data.DestinationPlace
            : null,
          deliveryplace: '',
          itemnumber: data.ItemNumber ? data.ItemNumber : null,
          percartonweight: data.PerCartonWeight
            ? data.PerCartonWeight.toString()
            : '',
          rowscancode: '',
          scancode: data.ScanCode ? data.ScanCode : null,
          seasonid: data.SeasonId.toString(),
          styleid: data.StyleId.toString(),
          userid: userId,
          adloginid: userAddLoginId,
        });
      });
    }
    type MaterDataTypes = {
      id: number;
      sendChallanNo: string;
      sendingdate: any;
      totalcartonqty: number;
      sentCompany: number;
      sentFloor: string;
      status: number;
      comments: string;
      detailData: object;
      allscancode: string;
    };

    let globalValue = {
      userid: userId,
      adloginid: userAddLoginId,
    };

    if (sendDate) {
      if (DetailArray.length > 0) {
        //@ts-ignore
        const masterData: MaterDataTypes = {};
        masterData.id = 0;
        masterData.sendChallanNo = '';
        masterData.sendingdate = sendDate;
        masterData.totalcartonqty = 0;
        masterData.sentCompany = 0;
        masterData.sentFloor = '';
        masterData.status = 0;
        masterData.comments = '';
        masterData.detailData = DetailArray;
        masterData.allscancode = '';

        const master = {...masterData, ...globalValue};

        instance
          .post(
            'SendFinishGoods/AddUpdateSendFinishGoodsScanMaster',
            JSON.stringify(master),
          )
          .then(res => {
            var masterId = res.data.res;

            if (parseInt(masterId) > 0) {
              ToastMsg({
                text1: 'Successfully Saved',
                type: 'success',
              });
              setTimeout(function () {
                setFinalData([]);
                setScanCode('');
              }, 1200);
            } else {
              ToastMsg({
                text1: 'Data not saved!!!',
                type: 'info',
              });
            }
          });
      } else {
        ToastMsg({
          text1: 'Details data not found!!!',
          type: 'error',
        });
      }
    } else {
      ToastMsg({
        text1: 'Please Enter All Required Fields!!!',
        type: 'error',
      });
    }
  };

  return (
    <Container>
      <View>
        {isOpenCamera && (
          <>
            <QRCodeScanner
              cameraStyle={{
                alignSelf: 'center',
              }}
              onRead={data => {
                setScanCode(data?.data);
                getCartonlistForSending(data?.data);
              }}
              flashMode={isFlashOn ? RNCamera.Constants.FlashMode.torch : null}
              bottomContent={
                <View>
                  <Text style={{color: COLORS.white}}>
                    Scan result is : {ScanCode}
                  </Text>
                </View>
              }
              reactivate={true}
              reactivateTimeout={5000}
              showMarker={true}
              ref={node => {
                scanner = node;
              }}
            />
          </>
        )}
      </View>
      <View>
        {!isOpenCamera ? (
          <>
            <View
              style={{flexDirection: 'row', justifyContent: 'space-between'}}>
              <Button
                borderRadius={5}
                width={SIZES.width / 4}
                height={SIZES.height / 22}
                style={{margin: 10}}
                textSize={14}
                textColor={COLORS.white}
                bgColor={COLORS.green}
                onPress={() => {
                  setIsOpenCamera(true);
                }}>
                Scan QR
              </Button>
              <Button
                borderRadius={5}
                width={SIZES.width / 4}
                height={SIZES.height / 22}
                style={{margin: 10}}
                textSize={14}
                textColor={COLORS.white}
                bgColor={COLORS.reset}
                onPress={() => {
                  setFinalData([]);
                  setScanCode('');
                }}>
                Reset
              </Button>
              {finalData && finalData?.length > 0 && (
                <Button
                  borderRadius={5}
                  width={SIZES.width / 4}
                  height={SIZES.height / 22}
                  style={{margin: 10}}
                  textSize={14}
                  textColor={COLORS.white}
                  bgColor={COLORS.primary}
                  onPress={() => {
                    postAllData();
                  }}>
                  Submit
                </Button>
              )}
            </View>
            <ScrollView>
              <ScrollView horizontal={true}>
                <DataTable
                  style={{
                    width: SIZES.width / 0.6,
                    height: SIZES.height / 1.3,
                  }}>
                  <DataTable.Header>
                    <DataTable.Title style={{flex: 0.2}}>SL</DataTable.Title>
                    <DataTable.Title style={{flex: 0.5}}>
                      ScanCode
                    </DataTable.Title>
                    <DataTable.Title style={{flex: 0.5, paddingLeft: 15}}>
                      Buyer
                    </DataTable.Title>
                    <DataTable.Title style={{flex: 0.5}}>
                      Season
                    </DataTable.Title>
                    <DataTable.Title style={{flex: 0.5}}>Style</DataTable.Title>
                    <DataTable.Title style={{flex: 0.6}}>PoNo</DataTable.Title>
                    <DataTable.Title style={{flex: 0.5}}>Color</DataTable.Title>
                    <DataTable.Title style={{flex: 0.3}}>Size</DataTable.Title>
                    <DataTable.Title style={{flex: 0}}>Qty.</DataTable.Title>
                  </DataTable.Header>
                  <ScrollView>
                    {finalData === null ||
                      (finalData === undefined && (
                        <ActivityIndicator
                          size="large"
                          color={COLORS.primary}
                        />
                      ))}
                    {finalData.reverse()?.map((item, id) => (
                      <DataTable.Row key={id}>
                        <DataTable.Cell
                          style={{flex: 0.1}}
                          textStyle={{fontSize: 12}}>
                          {finalData?.length - id}
                        </DataTable.Cell>
                        <DataTable.Cell
                          style={{flex: 0.4}}
                          numeric
                          textStyle={{fontSize: 12}}>
                          {item?.ScanCode}
                        </DataTable.Cell>
                        <DataTable.Cell
                          style={{flex: 0.4}}
                          numeric
                          textStyle={{fontSize: 12}}>
                          {item?.Buyer}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.5}}
                          textStyle={{fontSize: 12}}>
                          {item?.Season}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.5}}
                          textStyle={{fontSize: 12}}>
                          {item?.Style}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.6}}
                          textStyle={{fontSize: 12}}>
                          {item?.PoNo}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.6}}
                          textStyle={{fontSize: 12}}>
                          {item?.ColorId}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.4}}
                          textStyle={{fontSize: 12}}>
                          {item?.SizeId}
                        </DataTable.Cell>
                        <DataTable.Cell
                          numeric
                          style={{flex: 0.4}}
                          textStyle={{fontSize: 12}}>
                          {item?.PcsQty}
                        </DataTable.Cell>
                      </DataTable.Row>
                    ))}
                  </ScrollView>
                </DataTable>
              </ScrollView>
            </ScrollView>
          </>
        ) : (
          <View
            style={{
              position: 'absolute',
              top: SIZES.height / 1.35,
              alignSelf: 'center',
              flexDirection: 'row',
              justifyContent: 'space-around',
            }}>
            <Button
              borderRadius={5}
              width={SIZES.width / 4}
              height={SIZES.height / 22}
              textSize={14}
              textColor={COLORS.white}
              bgColor={COLORS.reset}
              onPress={() => {
                setScanCode('');
                setIsOpenCamera(false);
              }}>
              Close Camera
            </Button>

            <Button
              borderRadius={5}
              width={SIZES.width / 4}
              height={SIZES.height / 22}
              textSize={14}
              textColor={COLORS.white}
              bgColor={isFlashOn ? COLORS.green : COLORS.primary}
              style={{marginLeft: 15}}
              onPress={() => {
                setIsFlashOn(!isFlashOn);
              }}>
              {isFlashOn ? 'Flash Off' : 'Flash On'}
            </Button>
          </View>
        )}

        <Toast position="top" topOffset={0} />
      </View>
    </Container>
  );
};

export default CartonSendScreen;
