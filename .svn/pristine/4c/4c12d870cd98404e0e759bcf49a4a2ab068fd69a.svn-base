import AsyncStorage from '@react-native-async-storage/async-storage';
import instance from 'axios/axiosInstance';
import { Formik } from 'formik';
import React, { useEffect, useRef, useState } from 'react';
import {
  Modal,
  Pressable,
  StyleSheet,
  Text,
  TextInput,
  View
} from 'react-native';

import { useNavigation } from '@react-navigation/native';
import DropDownPicker from 'react-native-dropdown-picker';
import { ScrollView, TouchableOpacity } from 'react-native-gesture-handler';
import {
  ActivityIndicator,
  DataTable
} from 'react-native-paper';
import Toast from 'react-native-toast-message';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import * as yup from 'yup';
import { useAppTheme } from '../../../../App';
import Button from '../../../components/Button';
import Container from '../../../components/Container';
import ToastMsg from '../../../components/Toast';

let skipValue = 1;
let takeValue = 10;

let userId;
let userAddLoginId; 

const MenuCreateScreen = () => {
  const {COLORS, SIZES} = useAppTheme();
  const navigation = useNavigation();

  const [gridData, setGridData] = useState({});
  const [selectedParentMenu, setSelectedParentMenu] = useState(null);
  const [menuInfo, setMenuInfo] = useState();
  const [isMenuUpdate, setIsMenuUpdate] = useState(false);
  const [deleteMenuId, setDeleteMenuId] = useState(null);

  const [modalVisible, setModalVisible] = useState(false);

  const [parentMenu, setParentMenu] = useState([]);
  const [isParenMenuOpen, setIsParenMenuOpen] = useState(false);

  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [selectedMenu, setSelectedMenu] = useState(0);

  const [isAddMenuFormOpen, setIsAddMenuFormOpen] = useState(false);

  const formRef = useRef();

  const [menus, setMenus] = useState([
    {label: 'Parent', value: '1'},
    {label: 'Children', value: '2'},
    {label: 'Sub_Children', value: '3'},
  ]);
  const loginValidationSchema = yup.object().shape({
    title: yup
      .string()
      .required('Title is Required')
      .min(1, ({min}) => `Title must be at least ${min} word`),
    Serial_No: yup.string().required('Serial No is required'),
  });

  const listOfMenuHandler  = async () => { 
    var data = {
      skip: skipValue,
      take: takeValue,
    }; 
    await instance
      .post('AppsLogin_Menu/GetGrid', data)
      .then(res => {
        let resposne = res.data.res;
        setGridData(resposne);
      })
      .catch(err => {
        if (err) {
          console.log(err.message);
          setGridData({});
        }
      });
  };
  const decrementHandler = async () => {
    if (skipValue >= 11) {
      skipValue = skipValue - 10;
      takeValue = takeValue - 10;
      await listOfMenuHandler(skipValue, takeValue);
    } else {
      return;
    }
  };
  const incrementHandler = async () => {
    if (gridData?.totalCount > takeValue) {
      skipValue = skipValue + 10;
      takeValue = takeValue + 10;
      await listOfMenuHandler(skipValue, takeValue);
    } else {
      return;
    }
  };
  const incrementByPageNumberHandler = async page => {
    skipValue = page * 10 + 1;
    takeValue = page * 10 + 10;
    await listOfMenuHandler(skipValue, takeValue);
  };

  const parentMenuHandler = async () => {
    userId = await AsyncStorage.getItem('userId');
    userAddLoginId = await AsyncStorage.getItem('userAddLoginId');
    token = await AsyncStorage.getItem('token');
    
    await instance
      .post('AppsLogin_Menu/get_parent_menu')
      .then(res => { 
        const jsParse =  res?.data?.res ; 
        setParentMenu(jsParse);
      })
      .catch(err => {
        if (err) {
          console.log(err.message);
        }
      });
  }; 
  useEffect(() => { 
    parentMenuHandler();
    listOfMenuHandler();
  }, [navigation]);

  const createMenuToast = () => {
    Toast.show({
      type: 'success',
      text1: 'Success',
      text2: 'Menu created successfull',
      position: 'top',
      visibilityTime: 2000,
    });
  };
  const updateMenuToast = () => {
    Toast.show({
      type: 'success',
      text1: 'Success',
      text2: 'Menu update successfull',
      position: 'top',
      visibilityTime: 2000,
    });
  };

  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      setSelectedParentMenu(null);
      setIsAddMenuFormOpen(false);
      setIsMenuUpdate(false);
    });
    return unsubscribe;
  }, [navigation]);

  const menuDeleteHandler = async () => {
    data = {
      userid: userId,
      adloginid: userAddLoginId,
      id: deleteMenuId,
    };  
    await instance
      .post('AppsLogin_Menu/Delete', data)
      .then(res => {
        if (res?.status === 200) {
          Toast.show({
            type: 'success',
            text1: 'Deleted',
            text2: 'Item deleted',
            position: 'top',
            visibilityTime: 2000,
          });
          setModalVisible(false);
          listOfMenuHandler();
        }
      })
      .catch(err => {
        if (err) {
          console.log(err.message);
        }
      });
  };
  const menuEditHandler = async id => {
    setIsAddMenuFormOpen(true);
    setIsMenuUpdate(true); 
 
    await instance
      .post(`AppsLogin_Menu/GetByID/${id}`)
      .then(res => {
        let resposne = res?.data?.res;
        setMenuInfo(resposne);
        setSelectedParentMenu(resposne?.parentMenuId.toString());
        setSelectedMenu(resposne?.menuPositionId.toString());
      })
      .catch(err => {
        if (err) {
          console.log(err.message);
        }
      });
  };

  const [positionSelected, setPositionSelected] = useState(false);

  // number of page
  const noOfPage = Math.ceil(gridData?.totalCount / 10);

  // An array to store pagination
  const paginationCount = [];

  for (let page = 0; page < noOfPage; page++) {
    paginationCount.push(
      <TouchableOpacity
        key={page}
        onPress={() => {
          incrementByPageNumberHandler(page);
        }}>
        <Text
          style={{
            fontWeight: 'bold',
            fontSize: 18,
            paddingHorizontal: 8,
            color: COLORS.primary,
          }}>
          {page + 1}
        </Text>
      </TouchableOpacity>,
    );
  }

  return (
    <Container>
      <View style={{paddingBottom: SIZES.height/1.14}}> 
      {!isMenuUpdate && (
        <Button
        borderRadius={5}
        width={SIZES.width / 3.5}
        height={SIZES.height / 22}
        textSize={14}
        textColor={COLORS.white} 
        style={{ margin: 10 }}
        bgColor={COLORS.primary}
        onPress={() => {
              setIsAddMenuFormOpen(!isAddMenuFormOpen);
              setSelectedParentMenu(null);
              setSelectedMenu(0);
            }}>
        Add Menu
      </Button>
      )}

      {isAddMenuFormOpen && (
        <View style={styles.container}>
          <Text
            style={{
              color: 'white',
              fontWeight: 'bold',
              fontSize: 18,
              marginVertical: 20,
              textAlign: 'center',
            }}>
            {isMenuUpdate ? 'Update Menu' : ' Create A New Menu'}
          </Text>
          <Formik
            innerRef={formRef}
            validationSchema={loginValidationSchema}
            initialValues={{
              title: isMenuUpdate ? menuInfo?.menuName : '',
              Serial_No: isMenuUpdate ? menuInfo?.menuSl.toString() : '',
            }}
            enableReinitialize={true}
            onSubmit={async values => {
              if (selectedMenu) {
                const data = JSON.stringify({
                  userid: userId,
                  adloginid: userAddLoginId,
                  id: isMenuUpdate ? menuInfo?.id : 0,
                  menuName: values.title,
                  menuSl: values.Serial_No,
                  parentMenuId: selectedParentMenu || 0,
                  menuPositionId: selectedMenu,
                }); 
                await instance
                  .post('AppsLogin_Menu/CreateUpdateMaster', data)
                  .then(res => {
                    if (res.status === 200) {
                      listOfMenuHandler(); 
                      parentMenuHandler();
                      if (isMenuUpdate) {
                        updateMenuToast();
                      } else {
                        createMenuToast();
                      }
                      setSelectedParentMenu(null);
                      setSelectedMenu(null);
                      setIsAddMenuFormOpen(false);
                      setIsMenuUpdate(false);
                    }
                  })
                  .catch(err => {
                    if (err) {
                      console.log(err); 
                    }
                  });


              } else {
                setPositionSelected(true);
              }
            }} 
            >
            {({
              handleChange,
              handleBlur,
              handleSubmit,
              resetForm,
              values,
              errors,
            }) => (
              <>
                <View
                  style={{
                    flexDirection: 'row',
                    marginTop: 20,
                    marginRight: 40,
                  }}>
                  <View
                    style={{
                      flex: 2,
                    }}>
                    <Text
                      style={{
                        fontSize: 12,
                        textAlign: 'right',
                        padding: 5,
                        color: 'white',
                      }}>
                      Title:
                    </Text>
                  </View>
                  <TextInput
                    name="title"
                    placeholder="Menu_title"
                    style={styles.textInput}
                    onChangeText={handleChange('title')}
                    onBlur={handleBlur('title')}
                    value={values.title}
                    keyboardType="name-phone-pad"
                  />
                </View>
                {errors.title && (
                  <Text
                    style={{
                      fontSize: 10,
                      color: 'red',
                      alignSelf: 'center',
                      paddingRight: 25,
                    }}>
                    {errors.title}
                  </Text>
                )}
                <View
                  style={{
                    flexDirection: 'row',
                    marginTop: 15,
                    marginRight: 40,
                  }}>
                  <View
                    style={{
                      flex: 2,
                    }}>
                    <Text
                      style={{
                        fontSize: 12,
                        textAlign: 'right',
                        padding: 5,
                        color: 'white',
                      }}>
                      Serial Number:
                    </Text>
                  </View>
                  <TextInput
                    name="Serial_No"
                    placeholder="Serial_No"
                    style={styles.textInput}
                    onChangeText={handleChange('Serial_No')}
                    onBlur={handleBlur('Serial_No')}
                    value={values.Serial_No}
                    keyboardType="number-pad"
                  />
                </View>
                {errors.Serial_No && (
                  <Text
                    style={{
                      fontSize: 10,
                      color: 'red',
                      alignSelf: 'center',
                      paddingRight: 15,
                    }}>
                    {errors.Serial_No}
                  </Text>
                )}
                <View
                  style={{
                    flexDirection: 'row',
                    marginTop: 15,
                    marginRight: 40,
                  }}>
                  <View
                    style={{
                      flex: 1,
                    }}>
                    <Text
                      style={{
                        fontSize: 12,
                        textAlign: 'right',
                        padding: 5,
                        color: 'white',
                      }}>
                      Parent Menu:
                    </Text>
                  </View>
                  <DropDownPicker
                    open={isParenMenuOpen}
                    value={selectedParentMenu}
                    items={parentMenu}
                    setOpen={setIsParenMenuOpen}
                    setValue={setSelectedParentMenu}
                    setItems={setParentMenu}
                    searchable={true}
                    zIndex={3000}
                    zIndexInverse={1000}
                    style={{
                      minHeight: 20,
                    }}
                    containerStyle={{
                      width: '62%',
                    }}
                  />
                </View>
                <View
                  style={{
                    flexDirection: 'row',
                    marginTop: 15,
                    marginRight: 40,
                  }}>
                  <View
                    style={{
                      flex: 2,
                    }}>
                    <Text
                      style={{
                        fontSize: 12,
                        textAlign: 'right',
                        padding: 5,
                        color: 'white',
                      }}>
                      Position:
                    </Text>
                  </View>
                  <DropDownPicker
                    open={isMenuOpen}
                    value={selectedMenu}
                    items={menus}
                    setOpen={setIsMenuOpen}
                    setValue={setSelectedMenu}
                    setItems={setMenus}
                    zIndex={2000}
                    zIndexInverse={2000}
                    style={{
                      minHeight: 20,
                    }}
                    containerStyle={{
                      width: '62%',
                    }}
                  />
                </View>
                {positionSelected && (
                  <Text
                    style={{
                      fontSize: 10,
                      color: 'red',
                      alignSelf: 'center',
                      paddingRight: 15,
                    }}>
                    Position DDL required
                  </Text>
                )}

                <View
                  style={{
                    flexDirection: 'row',
                    marginVertical: 40,
                  }}>
                  <TouchableOpacity
                    style={{
                      paddingHorizontal: 15,
                      paddingVertical: 8,
                      borderRadius: 5,
                      backgroundColor: COLORS.blue,
                    }}
                    onPress={() => {
                      setIsAddMenuFormOpen(false);
                      setIsMenuUpdate(false);
                    }}>
                    <Text style={{color: 'white'}}>Close</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={{
                      paddingHorizontal: 15,
                      paddingVertical: 8,
                      borderRadius: 5,
                      backgroundColor: COLORS.red,
                      marginHorizontal: 10,
                    }}
                    onPress={() => {
                      setSelectedParentMenu(null);
                      setSelectedMenu(null);
                      resetForm();
                      setPositionSelected(false);
                    }}>
                    <Text style={{color: 'white'}}>Reset</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={{
                      paddingHorizontal: 25,
                      paddingVertical: 8,
                      borderRadius: 5,
                      backgroundColor: 'white',
                    }}
                    onPressIn={handleSubmit}>
                    <Text style={{color:  COLORS.primary}}>
                      {isMenuUpdate ? 'Update' : 'Submit'}
                    </Text>
                  </TouchableOpacity>
                </View>
              </>
            )}
          </Formik>
        </View>
      )}
      <Toast position="top" topOffset={0} />

      <View style={{marginHorizontal: 15}}>
        {!isAddMenuFormOpen && (
          <>
            <DataTable>
              <DataTable.Header>
                <DataTable.Title style={{flex: 2}}>Name</DataTable.Title>
                <DataTable.Title style={{flex: 0.5}} numeric>
                  SI
                </DataTable.Title>
                <DataTable.Title style={{flex: 2}} numeric>
                  Parent Menu
                </DataTable.Title>
                <DataTable.Title style={{flex: 2, paddingRight: 15}} numeric>
                  Action
                </DataTable.Title>
              </DataTable.Header>

              <ScrollView>
                {gridData === null ||
                  (gridData === undefined && (
                    <ActivityIndicator size="large" color={COLORS.primary} />
                  ))}

                {gridData &&
                  gridData.items &&
                  gridData.items.map((item, id) => (
                    <DataTable.Row key={id}>
                      <DataTable.Cell
                        style={{flex: 1.5}}
                        textStyle={{fontSize: 12}}>
                        {item.menuName}
                      </DataTable.Cell>
                      <DataTable.Cell
                        style={{flex: 0.5}}
                        numeric
                        textStyle={{fontSize: 12}}>
                        {item.menuSl}
                      </DataTable.Cell>
                      <DataTable.Cell
                        style={{flex: 1}}
                        numeric
                        textStyle={{fontSize: 12}}>
                        {item.parentMenuName}
                      </DataTable.Cell>
                      <DataTable.Cell
                        style={{flex: 2}}
                        numeric
                        textStyle={{
                          fontSize: 12,
                        }}>
                        <View
                          style={{
                            flexDirection: 'row',
                            justifyContent: 'space-between',
                          }}>
                          <Icon
                            onPress={() => {
                              menuEditHandler(item?.id);
                            }}
                            name="circle-edit-outline"
                            style={{padding: 5}}
                            size={24}
                            color="green"
                          />
                          <Icon
                            style={{padding: 5}}
                            onPress={() => {
                              setDeleteMenuId(item?.id);
                              setModalVisible(true);
                            }}
                            name="delete-circle-outline"
                            size={24}
                            color="red"
                          />
                        </View>
                      </DataTable.Cell>
                    </DataTable.Row>
                  ))}
              </ScrollView>
              <View
                style={{
                  flexDirection: 'row',
                  justifyContent: 'center',
                  marginTop: 15,
                }}> 
                 <Button
                    borderRadius={5}
                    width={SIZES.width / 4}
                    height={SIZES.height / 22}
                    textSize={14}
                    textColor={COLORS.white} 
                    style={{ margin: 10 }}
                    bgColor={COLORS.primary}
                    onPress={() => decrementHandler()}>
                    Prev
                </Button> 
                  <Button
                    borderRadius={5}
                    width={SIZES.width / 4}
                    height={SIZES.height / 22}
                    textSize={14}
                    textColor={COLORS.white} 
                    style={{ margin: 10 }}
                    bgColor={COLORS.primary}
                    onPress={() => incrementHandler()}>
                    Next
                </Button>
              </View>
            </DataTable>
            <View
              style={{
                flexDirection: 'row',
                marginTop: 15,
              }}>
              <Icon
                onPress={() => {
                  incrementByPageNumberHandler(0);
                }}
                name="arrow-collapse-left"
                style={{paddingTop: 2, paddingLeft: '5%'}}
                size={20}
                color={COLORS.primary}
              />
              <ScrollView
                contentContainerStyle={{
                  flexGrow: 1,
                  justifyContent: 'center',
                  alignContent: 'center',
                  alignItems: 'center',
                  alignSelf: 'center',
                }}
                horizontal={true}>
                {paginationCount}
              </ScrollView>
              <Icon
                onPress={() => {
                  incrementByPageNumberHandler(noOfPage - 1);
                }}
                name="arrow-collapse-right"
                style={{paddingTop: 2, paddingRight: '8%'}}
                size={20}
                color={COLORS.primary}
              />
            </View>
          </>
        )}
      </View>
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => { 
          ToastMsg({
            text2: 'Modal has been closed.',
            type: 'info',
          });
          setModalVisible(!modalVisible);
        }}>
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Text style={styles.modalText}>
              Do you want to delete this menu ?
            </Text>
            <View
              style={{
                flexDirection: 'row',
              }}>
              <Pressable
                style={[styles.button, styles.buttonClose]}
                onPress={() => setModalVisible(!modalVisible)}>
                <Text style={styles.textStyle}>No</Text>
              </Pressable>
              <Pressable
                style={[styles.button, styles.buttonDelete]}
                onPress={() => menuDeleteHandler()}>
                <Text style={styles.textStyle}>Yes</Text>
              </Pressable>
            </View>
          </View>
        </View>
      </Modal>
    </View>
    </Container>
  );
};
const styles = StyleSheet.create({
  container: {
    width: '75%',
    alignSelf: 'center',
    alignItems: 'center',
    elevation: 5,
    backgroundColor: '#00bbda',
    marginTop: 10,
    borderRadius: 5,
  },
  textInput: {
    flex: 3,
    width: '25%',
    fontSize: 12,
    padding: 0,
    paddingLeft: 10,
    backgroundColor: 'white',
    borderColor: '#00bbda',
    borderWidth: StyleSheet.hairlineWidth,
    borderRadius: 5,
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalView: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 35,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  button: {
    borderRadius: 5,
    padding: 10,
    elevation: 2,
  },
  buttonOpen: {
    backgroundColor: '#F194FF',
  },
  buttonClose: {
    backgroundColor: 'red',
    marginRight: 10,
    width: '15%',
  },
  buttonDelete: {
    backgroundColor: 'red',
    backgroundColor: '#00bbda',
    width: '15%',
    marginLeft: 15,
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  modalText: {
    marginBottom: 20,
    textAlign: 'center',
    fontSize: 15,
  },
});

export default MenuCreateScreen; 
