import AsyncStorage from '@react-native-async-storage/async-storage';
import {useIsFocused, useNavigation} from '@react-navigation/native';
import React, {useEffect, useState} from 'react';
import {Image, StyleSheet, Text, View} from 'react-native';
import {ScrollView, TouchableOpacity} from 'react-native-gesture-handler';
import {List} from 'react-native-paper';
import {SafeAreaView} from 'react-native-safe-area-context';
import uuid from 'react-native-uuid';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import {useAppTheme} from '../../App';
import instance from '../axios/axiosInstance';
import MyStatusBar from './StatusBar';

let userId;
let token;
const CustomDrawer = () => {
  const isFocused = useIsFocused();
  const {COLORS, SIZES} = useAppTheme();
  const navigation: any = useNavigation();
  const uID = uuid.v4();
  const [getMenues, setGetMenues] = useState<any>();

  useEffect(() => {
    if (isFocused) {
      //fun handler called
      fun();
    }
  }, [isFocused]);

  //fun handler
  const fun = async () => {
    userId = await AsyncStorage.getItem('userId');
    token = await AsyncStorage.getItem('token');
    await instance
      .post(`AppsLogin_Menu/UserWisePermittedMenu/${userId}`)
      .then(res => {
        let jsonParse = JSON.parse(res?.data?.res);
        if (jsonParse) {
          setGetMenues(jsonParse);
        } else {
          setGetMenues([]);
        }
      })

      .catch(err => {
        if (err) {
          console.log(err.message);
        }
      });
  };

  return (
    <SafeAreaView>
      <MyStatusBar backgroundColor={COLORS.primary} barStyle="light-content" />
      <View
        style={{
          height: SIZES.height / 1.15,
        }}>
        <View
          style={{
            height: 100,
            justifyContent: 'center',
            backgroundColor: COLORS.primary,
          }}>
          <Image
            style={{
              resizeMode: 'contain',
              width: 120,
              alignSelf: 'center',
            }}
            source={require('../assets/2.jpg')}
          />
          <Text style={{fontSize: 14, color: 'white', alignSelf: 'center'}}>
            Welcome to Snowtex
          </Text>
        </View>

        <ScrollView showsVerticalScrollIndicator={false}>
          <View
            style={{
              backgroundColor: COLORS.primary,
              // color: 'white',
            }}>
            {getMenues?.map(firstLayer => (
              <View key={firstLayer?.id}>
                <List.AccordionGroup
                  //@ts-ignore
                  titleStyle={{fontSize: 18, color: 'white'}}
                  key={firstLayer?.id + uID}
                  id={firstLayer?.id + uID}>
                  <TouchableOpacity
                    key={firstLayer?.id + uID}
                    activeOpacity={1}
                    onPressIn={() =>
                      !firstLayer?.children &&
                      navigation.navigate(firstLayer?.title)
                    }>
                    <List.Accordion
                      left={props => (
                        <Icon
                          {...props}
                          name="star-circle"
                          size={20}
                          color={COLORS.primary}
                        />
                      )}
                      right={props =>
                        firstLayer?.children && (
                          <Icon
                            {...props}
                            name="arrow-down"
                            size={20}
                            color={COLORS.primary}
                          />
                        )
                      }
                      titleStyle={{
                        fontSize: 14,
                        color: 'white',
                        fontWeight: '500',
                      }}
                      title={firstLayer?.title}
                      style={[
                        {
                          backgroundColor: 'gray',
                          height: 60,
                          borderBottomColor: COLORS.primary,
                        },
                        styles.borderColour,
                      ]}
                      key={firstLayer?.id + uID}
                      id={firstLayer?.id + uID}>
                      <List.AccordionGroup
                        // title="Accordion 4"
                        key={firstLayer?.id + uID}
                        //@ts-ignore
                        id={firstLayer?.id + uID}>
                        {!firstLayer?.children
                          ? null
                          : firstLayer?.children?.map(secondLayer => (
                              <TouchableOpacity
                                activeOpacity={1}
                                onPressIn={() =>
                                  !secondLayer?.sub_children &&
                                  navigation.navigate(secondLayer?.title)
                                }
                                key={secondLayer?.id + uID}>
                                <List.Accordion
                                  right={props =>
                                    secondLayer?.sub_children ? (
                                      <Icon
                                        {...props}
                                        name="arrow-down"
                                        size={20}
                                        color={COLORS.primary}
                                      />
                                    ) : (
                                      <Icon
                                        {...props}
                                        name="arrow-right"
                                        size={20}
                                        color={COLORS.primary}
                                      />
                                    )
                                  }
                                  style={[
                                    {
                                      backgroundColor: 'gray',
                                      borderBottomColor: COLORS.primary,
                                    },
                                    styles.borderColour,
                                  ]}
                                  title={secondLayer.title}
                                  titleStyle={{
                                    fontSize: 12,
                                    paddingLeft: 15,
                                    color: 'white',
                                    fontWeight: '700',
                                  }}
                                  id={secondLayer?.id + uID}>
                                  {!secondLayer?.sub_children
                                    ? null
                                    : secondLayer?.sub_children?.map(
                                        thirdLayer => (
                                          <View
                                            key={thirdLayer?.id}
                                            style={{backgroundColor: 'gray'}}>
                                            <TouchableOpacity
                                              activeOpacity={1}
                                              onPressIn={() => {
                                                navigation.navigate(
                                                  thirdLayer?.title,
                                                );
                                              }}
                                              key={thirdLayer?.id}>
                                              <List.Accordion
                                                //@ts-ignore
                                                titleStyle={{
                                                  fontSize: 12,
                                                  paddingLeft: 30,
                                                  color: 'white',
                                                  fontWeight: '700',
                                                }}
                                                right={props => (
                                                  <Icon
                                                    {...props}
                                                    name="arrow-right"
                                                    size={20}
                                                    color={COLORS.primary}
                                                  />
                                                )}
                                                style={[
                                                  {
                                                    backgroundColor: 'gray',
                                                    borderBottomColor:
                                                      COLORS.primary,
                                                  },
                                                  styles.borderColour,
                                                ]}
                                                title={thirdLayer.title}
                                                id={thirdLayer?.id}>
                                                <Text>third layer</Text>
                                              </List.Accordion>
                                            </TouchableOpacity>
                                          </View>
                                        ),
                                      )}
                                </List.Accordion>
                              </TouchableOpacity>
                            ))}
                      </List.AccordionGroup>
                    </List.Accordion>
                  </TouchableOpacity>
                </List.AccordionGroup>
              </View>
            ))}
          </View>
        </ScrollView>
      </View>
      <TouchableOpacity
        onPress={async () => {
          await AsyncStorage.removeItem('token');
          await AsyncStorage.removeItem('expDate');
          await AsyncStorage.removeItem('userId');
          await AsyncStorage.clear();
          setGetMenues([]);
          navigation.reset({
            routes: [{name: 'Login'}],
          });
        }}>
        <View
          style={{
            height: 50,
            justifyContent: 'center',
            borderWidth: 2,
            borderColor: COLORS.primary,
            backgroundColor: COLORS.primary,
          }}>
          <Text
            style={{
              color: 'white',
              alignSelf: 'center',
            }}>
            Logout
          </Text>
        </View>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  borderColour: {
    borderBottomWidth: 1,
  },
});

export default CustomDrawer;
